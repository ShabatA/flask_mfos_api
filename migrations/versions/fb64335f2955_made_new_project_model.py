"""made new project model

Revision ID: fb64335f2955
Revises: c90679231c0c
Create Date: 2024-01-27 13:17:30.335274

"""

from alembic import op
import sqlalchemy as sa
from sqlalchemy.dialects import postgresql

# revision identifiers, used by Alembic.
revision = "fb64335f2955"
down_revision = "c90679231c0c"
branch_labels = None
depends_on = None


def upgrade():
    # ### commands auto generated by Alembic - please adjust! ###
    op.create_table(
        "projects_data",
        sa.Column("projectID", sa.Integer(), nullable=False),
        sa.Column("createdBy", sa.Integer(), nullable=True),
        sa.Column("regionID", sa.Integer(), nullable=False),
        sa.Column("projectName", sa.String(), nullable=False),
        sa.Column("budgetRequired", sa.Float(), nullable=False),
        sa.Column("budgetApproved", sa.Float(), nullable=True),
        sa.Column(
            "projectStatus",
            sa.Enum("PENDING", "APPROVED", "REJECTED", "ASSESSMENT", name="status"),
            nullable=False,
        ),
        sa.Column("projectScope", sa.Integer(), nullable=False),
        sa.Column("projectIdea", sa.Text(), nullable=False),
        sa.Column("solution", sa.Text(), nullable=False),
        sa.Column("addedValue", sa.Text(), nullable=False),
        sa.Column("projectNature", sa.Integer(), nullable=False),
        sa.Column("beneficiaryCategory", sa.Integer(), nullable=False),
        sa.Column("commitment", sa.Integer(), nullable=False),
        sa.Column("commitmentType", sa.Integer(), nullable=True),
        sa.Column("supportingOrg", sa.Text(), nullable=True),
        sa.Column("documents", postgresql.ARRAY(sa.Integer()), nullable=True),
        sa.Column("recommendationLetter", sa.Integer(), nullable=True),
        sa.Column(
            "category", sa.Enum("A", "B", "C", "D", name="category"), nullable=True
        ),
        sa.Column("startDate", sa.Date(), nullable=True),
        sa.Column("createdAt", sa.DateTime(), nullable=False),
        sa.Column("dueDate", sa.Date(), nullable=True),
        sa.ForeignKeyConstraint(
            ["createdBy"],
            ["users.userID"],
        ),
        sa.ForeignKeyConstraint(
            ["regionID"],
            ["regions.regionID"],
        ),
        sa.PrimaryKeyConstraint("projectID"),
    )

    with op.batch_alter_table("assessment_answers", schema=None) as batch_op:
        batch_op.drop_constraint(
            "assessment_answers_projectID_fkey", type_="foreignkey"
        )
        batch_op.create_foreign_key(None, "projects_data", ["projectID"], ["projectID"])

    # with op.batch_alter_table('cases', schema=None) as batch_op:
    #     batch_op.alter_column('category',
    #            existing_type=postgresql.ENUM('A', 'B', 'C', 'D', name='cases_category'),
    #            type_=sa.Enum('A', 'B', 'C', 'D', name='casecategory'),
    #            existing_nullable=True)

    with op.batch_alter_table("project_stage", schema=None) as batch_op:
        batch_op.drop_constraint("project_stage_projectID_fkey", type_="foreignkey")
        batch_op.create_foreign_key(None, "projects_data", ["projectID"], ["projectID"])

    with op.batch_alter_table("project_status_data", schema=None) as batch_op:
        batch_op.drop_constraint(
            "project_status_data_projectID_fkey", type_="foreignkey"
        )
        batch_op.create_foreign_key(None, "projects_data", ["projectID"], ["projectID"])

    with op.batch_alter_table("project_task", schema=None) as batch_op:
        batch_op.drop_constraint("project_task_projectID_fkey", type_="foreignkey")
        batch_op.create_foreign_key(None, "projects_data", ["projectID"], ["projectID"])

    with op.batch_alter_table("project_user", schema=None) as batch_op:
        batch_op.drop_constraint("project_user_projectID_fkey", type_="foreignkey")
        batch_op.create_foreign_key(None, "projects_data", ["projectID"], ["projectID"])

    op.drop_table("answers")
    op.drop_table("projects")

    # ### end Alembic commands ###


def downgrade():
    # ### commands auto generated by Alembic - please adjust! ###
    with op.batch_alter_table("project_user", schema=None) as batch_op:
        batch_op.drop_constraint(None, type_="foreignkey")
        batch_op.create_foreign_key(
            "project_user_projectID_fkey", "projects", ["projectID"], ["projectID"]
        )

    with op.batch_alter_table("project_task", schema=None) as batch_op:
        batch_op.drop_constraint(None, type_="foreignkey")
        batch_op.create_foreign_key(
            "project_task_projectID_fkey", "projects", ["projectID"], ["projectID"]
        )

    with op.batch_alter_table("project_status_data", schema=None) as batch_op:
        batch_op.drop_constraint(None, type_="foreignkey")
        batch_op.create_foreign_key(
            "project_status_data_projectID_fkey",
            "projects",
            ["projectID"],
            ["projectID"],
        )

    with op.batch_alter_table("project_stage", schema=None) as batch_op:
        batch_op.drop_constraint(None, type_="foreignkey")
        batch_op.create_foreign_key(
            "project_stage_projectID_fkey", "projects", ["projectID"], ["projectID"]
        )

    with op.batch_alter_table("cases", schema=None) as batch_op:
        batch_op.alter_column(
            "category",
            existing_type=sa.Enum("A", "B", "C", "D", name="casecategory"),
            type_=postgresql.ENUM("A", "B", "C", "D", name="cases_category"),
            existing_nullable=True,
        )

    with op.batch_alter_table("assessment_answers", schema=None) as batch_op:
        batch_op.drop_constraint(None, type_="foreignkey")
        batch_op.create_foreign_key(
            "assessment_answers_projectID_fkey",
            "projects",
            ["projectID"],
            ["projectID"],
        )

    op.create_table(
        "answers",
        sa.Column(
            "answerID",
            sa.INTEGER(),
            server_default=sa.text("nextval('\"answers_answerID_seq\"'::regclass)"),
            autoincrement=True,
            nullable=False,
        ),
        sa.Column("projectID", sa.INTEGER(), autoincrement=False, nullable=False),
        sa.Column("questionID", sa.INTEGER(), autoincrement=False, nullable=False),
        sa.Column("answerText", sa.VARCHAR(), autoincrement=False, nullable=True),
        sa.Column("choiceID", sa.INTEGER(), autoincrement=False, nullable=True),
        sa.Column(
            "extras",
            postgresql.JSONB(astext_type=sa.Text()),
            autoincrement=False,
            nullable=True,
        ),
        sa.ForeignKeyConstraint(
            ["choiceID"], ["question_choices.choiceID"], name="answers_choiceID_fkey"
        ),
        sa.ForeignKeyConstraint(
            ["projectID"], ["projects.projectID"], name="answers_projectID_fkey"
        ),
        sa.ForeignKeyConstraint(
            ["questionID"], ["questions.questionID"], name="answers_questionID_fkey"
        ),
        sa.PrimaryKeyConstraint("answerID", name="answers_pkey"),
    )
    op.create_table(
        "projects",
        sa.Column(
            "projectID",
            sa.INTEGER(),
            server_default=sa.text("nextval('\"projects_projectID_seq\"'::regclass)"),
            autoincrement=True,
            nullable=False,
        ),
        sa.Column("projectName", sa.VARCHAR(), autoincrement=False, nullable=False),
        sa.Column("regionID", sa.INTEGER(), autoincrement=False, nullable=False),
        sa.Column(
            "budgetRequired",
            sa.DOUBLE_PRECISION(precision=53),
            autoincrement=False,
            nullable=False,
        ),
        sa.Column(
            "budgetAvailable",
            sa.DOUBLE_PRECISION(precision=53),
            autoincrement=False,
            nullable=False,
        ),
        sa.Column(
            "projectStatus",
            postgresql.ENUM(
                "PENDING",
                "APPROVED",
                "REJECTED",
                "pending assessment",
                "ASSESSMENT",
                name="projectstatus",
            ),
            autoincrement=False,
            nullable=False,
        ),
        sa.Column("projectScope", sa.VARCHAR(), autoincrement=False, nullable=True),
        sa.Column(
            "category",
            postgresql.ENUM("A", "B", "C", "D", name="projectcategory"),
            autoincrement=False,
            nullable=True,
        ),
        sa.Column("userID", sa.INTEGER(), autoincrement=False, nullable=True),
        sa.Column("startDate", sa.DATE(), autoincrement=False, nullable=True),
        sa.Column("dueDate", sa.DATE(), autoincrement=False, nullable=True),
        sa.Column(
            "createdAt", postgresql.TIMESTAMP(), autoincrement=False, nullable=False
        ),
        sa.ForeignKeyConstraint(
            ["regionID"], ["regions.regionID"], name="projects_regionID_fkey"
        ),
        sa.ForeignKeyConstraint(
            ["userID"], ["users.userID"], name="projects_userID_fkey"
        ),
        sa.PrimaryKeyConstraint("projectID", name="projects_pkey"),
    )
    op.drop_table("projects_data")
    # ### end Alembic commands ###
